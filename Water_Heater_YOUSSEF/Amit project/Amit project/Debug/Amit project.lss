
Amit project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000009ba  00000a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080006a  0080006a  00000a58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001523  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b43  00000000  00000000  000021f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff3  00000000  00000000  00002d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00003d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000659  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058f  00000000  00000000  00004739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00004cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8a:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:

//ISR to switch between on and off states


ISR(INT2_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	if(Current_state==OFF){
  b4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Current_state>
  b8:	81 11       	cpse	r24, r1
  ba:	0d c0       	rjmp	.+26     	; 0xd6 <__vector_3+0x44>
		Current_state = ON;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Current_state>
		desired_temp = EEPROM_read(0x0000);
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 34 03 	call	0x668	; 0x668 <EEPROM_read>
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <desired_temp+0x1>
  d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <desired_temp>
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <__vector_3+0x4e>
	}
	else if (Current_state==ON || Current_state==SETTING){
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	10 f4       	brcc	.+4      	; 0xe0 <__vector_3+0x4e>
		Current_state = OFF;
  dc:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Current_state>
	}
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	bf 91       	pop	r27
  e6:	af 91       	pop	r26
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	7f 91       	pop	r23
  ee:	6f 91       	pop	r22
  f0:	5f 91       	pop	r21
  f2:	4f 91       	pop	r20
  f4:	3f 91       	pop	r19
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_7>:

//Timer1 ISR which triggers the interrupt every 100 ms which makes ADC Read


ISR(TIMER1_COMPA_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
	temp_measure_flag = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <temp_measure_flag>
}
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_10>:
ISR triggers the interrupt every 1 second , to toggle the
toggle flag  and count to keep it in ON_STATE if nothing is pressed for 5 secs in the on and setting states.
*/

ISR(TIMER0_COMP_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	if ((Current_state==SETTING) || (Current_state==ON)){
 132:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Current_state>
 136:	81 50       	subi	r24, 0x01	; 1
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	b8 f4       	brcc	.+46     	; 0x16a <__vector_10+0x4a>
		setting_counter++;
 13c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <setting_counter>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <setting_counter>
		if(setting_counter % 4 == 0){
 146:	98 2f       	mov	r25, r24
 148:	93 70       	andi	r25, 0x03	; 3
 14a:	51 f4       	brne	.+20     	; 0x160 <__vector_10+0x40>
			toggle_flag ^= 1;
 14c:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <toggle_flag>
 150:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <toggle_flag+0x1>
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	29 27       	eor	r18, r25
 158:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <toggle_flag+0x1>
 15c:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <toggle_flag>
		}
		if (setting_counter > 20){
 160:	85 31       	cpi	r24, 0x15	; 21
 162:	18 f0       	brcs	.+6      	; 0x16a <__vector_10+0x4a>
			
			Current_state = ON;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Current_state>
		}
	}
}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <main>:


int main(void)
{
	
	system_init();
 17c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <system_init>
	
	while(1){
		switch (Current_state){
 180:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Current_state>
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	21 f0       	breq	.+8      	; 0x190 <main+0x14>
 188:	30 f0       	brcs	.+12     	; 0x196 <main+0x1a>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	39 f0       	breq	.+14     	; 0x19c <main+0x20>
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <main+0x4>
			case ON:{
				ON_SYS();
 190:	0e 94 80 01 	call	0x300	; 0x300 <ON_SYS>
				break;
 194:	f5 cf       	rjmp	.-22     	; 0x180 <main+0x4>
			}
			case OFF:{
				OFF_SYS();
 196:	0e 94 24 02 	call	0x448	; 0x448 <OFF_SYS>
				break;
 19a:	f2 cf       	rjmp	.-28     	; 0x180 <main+0x4>
			}
			case SETTING:{
				SET_SYS();
 19c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SET_SYS>
				break;
 1a0:	ef cf       	rjmp	.-34     	; 0x180 <main+0x4>

000001a2 <SET_SYS>:



void SET_SYS(void)
{
	heater_off();
 1a2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <heater_off>
	cooler_off();
 1a6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <cooler_off>
	led_off();
 1aa:	0e 94 8e 02 	call	0x51c	; 0x51c <led_off>
	
	// to toggle the seven segment while writing the desired temperature
	
	if(toggle_flag == 1){
 1ae:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <toggle_flag>
 1b2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <toggle_flag+0x1>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <SET_SYS+0x26>
		SSD_print(desired_temp);
 1ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <desired_temp>
 1be:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <desired_temp+0x1>
 1c2:	0e 94 be 02 	call	0x57c	; 0x57c <SSD_print>
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <SET_SYS+0x2a>
	}
	else{
		SSD_tun_off();
 1c8:	0e 94 bc 02 	call	0x578	; 0x578 <SSD_tun_off>
	}
	
	// if UP or DOWN pressed, change the desired temp as long as it's still in range
	
	if((UP_BUTTON() == PRESSED) && (desired_temp < MAXIMUM_TEMP)){
 1cc:	0e 94 49 02 	call	0x492	; 0x492 <UP_BUTTON>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	89 f4       	brne	.+34     	; 0x1f6 <SET_SYS+0x54>
 1d4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <desired_temp>
 1d8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <desired_temp+0x1>
 1dc:	8b 34       	cpi	r24, 0x4B	; 75
 1de:	91 05       	cpc	r25, r1
 1e0:	50 f4       	brcc	.+20     	; 0x1f6 <SET_SYS+0x54>
		desired_temp = desired_temp + 5;
 1e2:	05 96       	adiw	r24, 0x05	; 5
 1e4:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <desired_temp+0x1>
 1e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <desired_temp>
		setting_counter = 0;
 1ec:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <setting_counter>
		SSD_print(desired_temp);
 1f0:	0e 94 be 02 	call	0x57c	; 0x57c <SSD_print>
 1f4:	14 c0       	rjmp	.+40     	; 0x21e <SET_SYS+0x7c>
	}
	else if ((DOWN_BUTTON() == PRESSED) && (desired_temp > MINIMUM_TEMP)){
 1f6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DOWN_BUTTON>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	81 f4       	brne	.+32     	; 0x21e <SET_SYS+0x7c>
 1fe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <desired_temp>
 202:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <desired_temp+0x1>
 206:	84 32       	cpi	r24, 0x24	; 36
 208:	91 05       	cpc	r25, r1
 20a:	48 f0       	brcs	.+18     	; 0x21e <SET_SYS+0x7c>
		desired_temp = desired_temp - 5;
 20c:	05 97       	sbiw	r24, 0x05	; 5
 20e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <desired_temp+0x1>
 212:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <desired_temp>
		setting_counter = 0;
 216:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <setting_counter>
		SSD_print(desired_temp);
 21a:	0e 94 be 02 	call	0x57c	; 0x57c <SSD_print>
	}
	
	EEPROM_write(0x0000,desired_temp);
 21e:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <desired_temp>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 3b 03 	call	0x676	; 0x676 <EEPROM_write>
 22a:	08 95       	ret

0000022c <temp_change>:
// This function turns on the Heater or the Cooler


void temp_change(void)
{
	if( (desired_temp < avg_temp + MARGIN) && (desired_temp > avg_temp - MARGIN) ){
 22c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <avg_temp>
 230:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <avg_temp+0x1>
 234:	ac 01       	movw	r20, r24
 236:	4b 5f       	subi	r20, 0xFB	; 251
 238:	5f 4f       	sbci	r21, 0xFF	; 255
 23a:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <desired_temp>
 23e:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <desired_temp+0x1>
 242:	24 17       	cp	r18, r20
 244:	35 07       	cpc	r19, r21
 246:	68 f4       	brcc	.+26     	; 0x262 <temp_change+0x36>
 248:	bc 01       	movw	r22, r24
 24a:	65 50       	subi	r22, 0x05	; 5
 24c:	71 09       	sbc	r23, r1
 24e:	62 17       	cp	r22, r18
 250:	73 07       	cpc	r23, r19
 252:	38 f4       	brcc	.+14     	; 0x262 <temp_change+0x36>
		// Actual Temperature equals Desired Temperature
		// No need for Heating or Cooling
		heater_off();
 254:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <heater_off>
		cooler_off();
 258:	0e 94 7f 02 	call	0x4fe	; 0x4fe <cooler_off>
		led_off();
 25c:	0e 94 8e 02 	call	0x51c	; 0x51c <led_off>
 260:	08 95       	ret
	}
	else if(desired_temp < avg_temp + MARGIN){
 262:	24 17       	cp	r18, r20
 264:	35 07       	cpc	r19, r21
 266:	38 f4       	brcc	.+14     	; 0x276 <temp_change+0x4a>
		// Actual Temperature is Larger
		// we need the Cooling element
		heater_off();
 268:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <heater_off>
		cooler_on();
 26c:	0e 94 77 02 	call	0x4ee	; 0x4ee <cooler_on>
		led_on();
 270:	0e 94 8a 02 	call	0x514	; 0x514 <led_on>
 274:	08 95       	ret
		
	}
	else if (desired_temp > avg_temp - MARGIN){
 276:	05 97       	sbiw	r24, 0x05	; 5
 278:	82 17       	cp	r24, r18
 27a:	93 07       	cpc	r25, r19
 27c:	78 f4       	brcc	.+30     	; 0x29c <temp_change+0x70>
		// Actual Temperature is Smaller
		
		
		
		heater_on();
 27e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <heater_on>
		cooler_off();
 282:	0e 94 7f 02 	call	0x4fe	; 0x4fe <cooler_off>
		if (toggle_flag == 1)
 286:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <toggle_flag>
 28a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <toggle_flag+0x1>
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	19 f4       	brne	.+6      	; 0x298 <temp_change+0x6c>
		{
			led_on();
 292:	0e 94 8a 02 	call	0x514	; 0x514 <led_on>
 296:	08 95       	ret
		}
		else {
			led_off();
 298:	0e 94 8e 02 	call	0x51c	; 0x51c <led_off>
 29c:	08 95       	ret

0000029e <add_temp>:
// This function is used to add the new measured temperature to the temperature array that will have its average during the code.


void add_temp(uint16_t * arr , uint16_t new_val)
{
	arr[arr_counter] = new_val;
 29e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
 2ac:	fc 01       	movw	r30, r24
 2ae:	71 83       	std	Z+1, r23	; 0x01
 2b0:	60 83       	st	Z, r22
	arr_counter ++;
 2b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	
	if (arr_counter == 10){
 2bc:	8a 30       	cpi	r24, 0x0A	; 10
 2be:	11 f4       	brne	.+4      	; 0x2c4 <add_temp+0x26>
		arr_counter = 0;
 2c0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 2c4:	08 95       	ret

000002c6 <calc_avg>:

// to calculate the last 10 measured temperatures.


uint16_t calc_avg(uint16_t * arr)
{
 2c6:	bc 01       	movw	r22, r24
	uint16_t sum = 0;
	uint16_t avg;
	
	for(uint8_t i=0; i<NUM_OF_MEASURES; i++){
 2c8:	90 e0       	ldi	r25, 0x00	; 0
// to calculate the last 10 measured temperatures.


uint16_t calc_avg(uint16_t * arr)
{
	uint16_t sum = 0;
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t avg;
	
	for(uint8_t i=0; i<NUM_OF_MEASURES; i++){
 2ce:	0b c0       	rjmp	.+22     	; 0x2e6 <calc_avg+0x20>
		sum = sum + arr[i];
 2d0:	e9 2f       	mov	r30, r25
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	e6 0f       	add	r30, r22
 2da:	f7 1f       	adc	r31, r23
 2dc:	40 81       	ld	r20, Z
 2de:	51 81       	ldd	r21, Z+1	; 0x01
 2e0:	24 0f       	add	r18, r20
 2e2:	35 1f       	adc	r19, r21
uint16_t calc_avg(uint16_t * arr)
{
	uint16_t sum = 0;
	uint16_t avg;
	
	for(uint8_t i=0; i<NUM_OF_MEASURES; i++){
 2e4:	9f 5f       	subi	r25, 0xFF	; 255
 2e6:	9a 30       	cpi	r25, 0x0A	; 10
 2e8:	98 f3       	brcs	.-26     	; 0x2d0 <calc_avg+0xa>
		sum = sum + arr[i];
	}
	avg = (uint16_t) sum / NUM_OF_MEASURES;
 2ea:	ad ec       	ldi	r26, 0xCD	; 205
 2ec:	bc ec       	ldi	r27, 0xCC	; 204
 2ee:	0e 94 b8 04 	call	0x970	; 0x970 <__umulhisi3>
	return avg;
}
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	08 95       	ret

00000300 <ON_SYS>:


void ON_SYS(void)
{
	// when the 100ms pass and flag is triggered, measure temperature from the sensor and add it to array and calculate the average
	if (temp_measure_flag == 1){
 300:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <temp_measure_flag>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	09 f5       	brne	.+66     	; 0x34a <ON_SYS+0x4a>
		actual_temp = (ADC_read()*(500.0/1023.0));
 308:	0e 94 25 03 	call	0x64a	; 0x64a <ADC_read>
 30c:	bc 01       	movw	r22, r24
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 a9 03 	call	0x752	; 0x752 <__floatunsisf>
 316:	20 e9       	ldi	r18, 0x90	; 144
 318:	3e e3       	ldi	r19, 0x3E	; 62
 31a:	4a ef       	ldi	r20, 0xFA	; 250
 31c:	5e e3       	ldi	r21, 0x3E	; 62
 31e:	0e 94 0f 04 	call	0x81e	; 0x81e <__mulsf3>
 322:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fixunssfsi>
 326:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <actual_temp+0x1>
 32a:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <actual_temp>
		add_temp(temp_arr , actual_temp);
 32e:	87 e7       	ldi	r24, 0x77	; 119
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 4f 01 	call	0x29e	; 0x29e <add_temp>
		avg_temp = calc_avg(temp_arr);	
 336:	87 e7       	ldi	r24, 0x77	; 119
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <calc_avg>
 33e:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <avg_temp+0x1>
 342:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <avg_temp>
		temp_measure_flag = 0;
 346:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <temp_measure_flag>
	}
	SSD_print(actual_temp);
 34a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <actual_temp>
 34e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <actual_temp+0x1>
 352:	0e 94 be 02 	call	0x57c	; 0x57c <SSD_print>
	// turn cooler or heater ON and OFF depending on the average temperature measured from the array.
	//If It is more than the desired+margin turns on the cooler
	//If It is less than the desired+margin turns on the heater
	temp_change();
 356:	0e 94 16 01 	call	0x22c	; 0x22c <temp_change>
	 // Check if UP or DOWN buttons are pressed to switch to the SETTING_MODE
	if(UP_BUTTON()==PRESSED || DOWN_BUTTON()==PRESSED){
 35a:	0e 94 49 02 	call	0x492	; 0x492 <UP_BUTTON>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	21 f0       	breq	.+8      	; 0x36a <ON_SYS+0x6a>
 362:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DOWN_BUTTON>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	39 f4       	brne	.+14     	; 0x378 <ON_SYS+0x78>
		SSD_disable();
 36a:	0e 94 aa 02 	call	0x554	; 0x554 <SSD_disable>
		setting_counter = 0;
 36e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <setting_counter>
		Current_state = SETTING;
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Current_state>
 378:	08 95       	ret

0000037a <temp_arr_init>:
//This function is a part of the Sys_init. function that reads the first actual temperature and put it at all elements in the temperature array.


void temp_arr_init(void)
{
	uint16_t first_temp = ADC_read()*(500.0/1023.0);
 37a:	0e 94 25 03 	call	0x64a	; 0x64a <ADC_read>
 37e:	bc 01       	movw	r22, r24
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 a9 03 	call	0x752	; 0x752 <__floatunsisf>
 388:	20 e9       	ldi	r18, 0x90	; 144
 38a:	3e e3       	ldi	r19, 0x3E	; 62
 38c:	4a ef       	ldi	r20, 0xFA	; 250
 38e:	5e e3       	ldi	r21, 0x3E	; 62
 390:	0e 94 0f 04 	call	0x81e	; 0x81e <__mulsf3>
 394:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fixunssfsi>
	
	for (uint8_t i = 0; i<NUM_OF_MEASURES; i++){
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <temp_arr_init+0x34>
		temp_arr[i]= first_temp;
 39c:	e8 2f       	mov	r30, r24
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	e9 58       	subi	r30, 0x89	; 137
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
 3a8:	71 83       	std	Z+1, r23	; 0x01
 3aa:	60 83       	st	Z, r22

void temp_arr_init(void)
{
	uint16_t first_temp = ADC_read()*(500.0/1023.0);
	
	for (uint8_t i = 0; i<NUM_OF_MEASURES; i++){
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	8a 30       	cpi	r24, 0x0A	; 10
 3b0:	a8 f3       	brcs	.-22     	; 0x39c <temp_arr_init+0x22>
		temp_arr[i]= first_temp;
	}
	
	avg_temp = calc_avg(temp_arr);
 3b2:	87 e7       	ldi	r24, 0x77	; 119
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <calc_avg>
 3ba:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <avg_temp+0x1>
 3be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <avg_temp>
	arr_counter = 0;
 3c2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 3c6:	08 95       	ret

000003c8 <system_init>:
#include "SYSTEM.h"

void system_init(void)             // function to initialize the system
{
	
	ADC_init();                    // initialization for ADC
 3c8:	0e 94 03 03 	call	0x606	; 0x606 <ADC_init>
	Buttons_init();                // initialization for button
 3cc:	0e 94 2f 02 	call	0x45e	; 0x45e <Buttons_init>
	cooler_init();                 // initialization for cooler
 3d0:	0e 94 6f 02 	call	0x4de	; 0x4de <cooler_init>
	heater_init();                 // initialization for heater
 3d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <heater_init>
	led_init();                    // initialization for led
 3d8:	0e 94 83 02 	call	0x506	; 0x506 <led_init>
	SSD_init();                    // initialization for 7 segment
 3dc:	0e 94 b1 02 	call	0x562	; 0x562 <SSD_init>
	timer0_init();                 // initialization for timer 0 
 3e0:	0e 94 66 03 	call	0x6cc	; 0x6cc <timer0_init>
	timer1_init();                 // initialization for timer 1 
 3e4:	0e 94 55 03 	call	0x6aa	; 0x6aa <timer1_init>
	timer1_enable();               // initialization for timer 1 enable
 3e8:	0e 94 76 03 	call	0x6ec	; 0x6ec <timer1_enable>

	Current_state = OFF;           //starting the OFF function
 3ec:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Current_state>
	
	
	if(EEPROM_read(0x0000) != 0xFF)               // setting up the  initial temperature value
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 34 03 	call	0x668	; 0x668 <EEPROM_read>
 3f8:	8f 3f       	cpi	r24, 0xFF	; 255
 3fa:	51 f0       	breq	.+20     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{                                        
		desired_temp = EEPROM_read(0x0000);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 34 03 	call	0x668	; 0x668 <EEPROM_read>
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <desired_temp+0x1>
 40a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <desired_temp>
 40e:	06 c0       	rjmp	.+12     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	}
	else{
		desired_temp = FIRST_DESIRED_TEMP;
 410:	8c e3       	ldi	r24, 0x3C	; 60
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <desired_temp+0x1>
 418:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <desired_temp>
	}
	
	temp_arr_init();
 41c:	0e 94 bd 01 	call	0x37a	; 0x37a <temp_arr_init>
	
	// saves result in EEPROM
	EEPROM_write(0x0000,(uint8_t) desired_temp);	
 420:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <desired_temp>
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 3b 03 	call	0x676	; 0x676 <EEPROM_write>
 42c:	08 95       	ret

0000042e <sleep>:


void sleep(void)
{
	
	MCUCR&=~(1<<SM0);
 42e:	85 b7       	in	r24, 0x35	; 53
 430:	8f 7e       	andi	r24, 0xEF	; 239
 432:	85 bf       	out	0x35, r24	; 53
	MCUCR&=~(1<<SM1);
 434:	85 b7       	in	r24, 0x35	; 53
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	85 bf       	out	0x35, r24	; 53
	MCUCR&=~(1<<SM2);
 43a:	85 b7       	in	r24, 0x35	; 53
 43c:	8f 7b       	andi	r24, 0xBF	; 191
 43e:	85 bf       	out	0x35, r24	; 53
	
	MCUCR|=(1<<SE);
 440:	85 b7       	in	r24, 0x35	; 53
 442:	80 68       	ori	r24, 0x80	; 128
 444:	85 bf       	out	0x35, r24	; 53
 446:	08 95       	ret

00000448 <OFF_SYS>:
// To turns off all devices  and the Timers.


void OFF_SYS(void)
{
		SSD_tun_off();
 448:	0e 94 bc 02 	call	0x578	; 0x578 <SSD_tun_off>
		led_off();
 44c:	0e 94 8e 02 	call	0x51c	; 0x51c <led_off>
		heater_off();
 450:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <heater_off>
		cooler_off();
 454:	0e 94 7f 02 	call	0x4fe	; 0x4fe <cooler_off>
		sleep(); 
 458:	0e 94 17 02 	call	0x42e	; 0x42e <sleep>
 45c:	08 95       	ret

0000045e <Buttons_init>:


void Buttons_init(void)
{
	// to Set the pins as INPUT
	clr_bit(B_PORT_DIR,ON_OFF_PIN);
 45e:	87 b3       	in	r24, 0x17	; 23
 460:	8b 7f       	andi	r24, 0xFB	; 251
 462:	87 bb       	out	0x17, r24	; 23
	clr_bit(B_PORT_DIR,UP_BUTTON_PIN);
 464:	87 b3       	in	r24, 0x17	; 23
 466:	8d 7f       	andi	r24, 0xFD	; 253
 468:	87 bb       	out	0x17, r24	; 23
	clr_bit(B_PORT_DIR,DOWN_BUTTON_PIN);
 46a:	87 b3       	in	r24, 0x17	; 23
 46c:	87 7f       	andi	r24, 0xF7	; 247
 46e:	87 bb       	out	0x17, r24	; 23
	
	// to enable Pull-Up Resistor
	
	set_bit(B_PORT,ON_OFF_PIN);
 470:	88 b3       	in	r24, 0x18	; 24
 472:	84 60       	ori	r24, 0x04	; 4
 474:	88 bb       	out	0x18, r24	; 24
	set_bit(B_PORT,UP_BUTTON_PIN);
 476:	88 b3       	in	r24, 0x18	; 24
 478:	82 60       	ori	r24, 0x02	; 2
 47a:	88 bb       	out	0x18, r24	; 24
	set_bit(B_PORT,DOWN_BUTTON_PIN);
 47c:	88 b3       	in	r24, 0x18	; 24
 47e:	88 60       	ori	r24, 0x08	; 8
 480:	88 bb       	out	0x18, r24	; 24
	
	
	// enable Global Interrupt
	sei();
 482:	78 94       	sei
	
	// Rising Edge
	set_bit(MCUCSR,ISC2);
 484:	84 b7       	in	r24, 0x34	; 52
 486:	80 64       	ori	r24, 0x40	; 64
 488:	84 bf       	out	0x34, r24	; 52
	
	// Enable (INT2)
	set_bit(GICR,INT2);
 48a:	8b b7       	in	r24, 0x3b	; 59
 48c:	80 62       	ori	r24, 0x20	; 32
 48e:	8b bf       	out	0x3b, r24	; 59
 490:	08 95       	ret

00000492 <UP_BUTTON>:


unsigned char UP_BUTTON(void)
{
	// To Check if the button is pressed for the first time
	if(!(read_bit(PINB,UP_BUTTON_PIN))){
 492:	96 b3       	in	r25, 0x16	; 22
 494:	89 2f       	mov	r24, r25
 496:	82 70       	andi	r24, 0x02	; 2
 498:	91 fd       	sbrc	r25, 1
 49a:	0a c0       	rjmp	.+20     	; 0x4b0 <UP_BUTTON+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	ef e3       	ldi	r30, 0x3F	; 63
 49e:	fc e9       	ldi	r31, 0x9C	; 156
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <UP_BUTTON+0xe>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <UP_BUTTON+0x14>
 4a6:	00 00       	nop
		// wait for 100 ms to make sure it's pressed 
		_delay_ms(DEBOUNCE_INTERVAL);
		
		// check one more time
		if (!(read_bit(PINB,UP_BUTTON_PIN))){
 4a8:	b1 99       	sbic	0x16, 1	; 22
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <UP_BUTTON+0x20>
			return PRESSED;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	08 95       	ret
		}
		else return NOT_PRESSED;
	}
	else return NOT_PRESSED;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
}
 4b2:	08 95       	ret

000004b4 <DOWN_BUTTON>:


unsigned char DOWN_BUTTON(void)
{
	// Check if the button is pressed for the first time 
	if(!(read_bit(PINB,DOWN_BUTTON_PIN))){
 4b4:	96 b3       	in	r25, 0x16	; 22
 4b6:	89 2f       	mov	r24, r25
 4b8:	88 70       	andi	r24, 0x08	; 8
 4ba:	93 fd       	sbrc	r25, 3
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <DOWN_BUTTON+0x1e>
 4be:	ef e3       	ldi	r30, 0x3F	; 63
 4c0:	fc e9       	ldi	r31, 0x9C	; 156
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <DOWN_BUTTON+0xe>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <DOWN_BUTTON+0x14>
 4c8:	00 00       	nop
		// wait for 100 ms to make sure it's pressed
		_delay_ms(DEBOUNCE_INTERVAL);
		
		// check one more time
		if (!(read_bit(PINB,DOWN_BUTTON_PIN))){
 4ca:	b3 99       	sbic	0x16, 3	; 22
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <DOWN_BUTTON+0x20>
			return PRESSED;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	08 95       	ret
		}
		else return NOT_PRESSED;
	}
	else return NOT_PRESSED;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
}
 4d4:	08 95       	ret

000004d6 <heater_init>:
#include "STD_MACROS.h"
#include "H_C_ELEMENTS.h"

void heater_init(void)
{
	set_bit(HEATER_PORT_DIR,HEATER_PIN);
 4d6:	87 b3       	in	r24, 0x17	; 23
 4d8:	80 61       	ori	r24, 0x10	; 16
 4da:	87 bb       	out	0x17, r24	; 23
 4dc:	08 95       	ret

000004de <cooler_init>:
}

void cooler_init(void)
{
	set_bit(COOLER_PORT_DIR,COOLER_PIN);
 4de:	87 b3       	in	r24, 0x17	; 23
 4e0:	80 62       	ori	r24, 0x20	; 32
 4e2:	87 bb       	out	0x17, r24	; 23
 4e4:	08 95       	ret

000004e6 <heater_on>:
//to start the Heater 


void heater_on(void)
{
	set_bit(HEATER_PORT,HEATER_PIN);
 4e6:	88 b3       	in	r24, 0x18	; 24
 4e8:	80 61       	ori	r24, 0x10	; 16
 4ea:	88 bb       	out	0x18, r24	; 24
 4ec:	08 95       	ret

000004ee <cooler_on>:

//to start the Cooler.

void cooler_on(void)
{
	set_bit(COOLER_PORT,COOLER_PIN);
 4ee:	88 b3       	in	r24, 0x18	; 24
 4f0:	80 62       	ori	r24, 0x20	; 32
 4f2:	88 bb       	out	0x18, r24	; 24
 4f4:	08 95       	ret

000004f6 <heater_off>:
// to stop Heater 


void heater_off(void)
{
	clr_bit(HEATER_PORT,HEATER_PIN);
 4f6:	88 b3       	in	r24, 0x18	; 24
 4f8:	8f 7e       	andi	r24, 0xEF	; 239
 4fa:	88 bb       	out	0x18, r24	; 24
 4fc:	08 95       	ret

000004fe <cooler_off>:
// to stop cooler


void cooler_off(void)
{
	clr_bit(COOLER_PORT,COOLER_PIN);
 4fe:	88 b3       	in	r24, 0x18	; 24
 500:	8f 7d       	andi	r24, 0xDF	; 223
 502:	88 bb       	out	0x18, r24	; 24
 504:	08 95       	ret

00000506 <led_init>:
{
	
	// PIN 0 in the port ------> output pin
	// the LED pin is off at the start
	
	set_bit(LED_PORT_DIR,LED_PIN);
 506:	87 b3       	in	r24, 0x17	; 23
 508:	81 60       	ori	r24, 0x01	; 1
 50a:	87 bb       	out	0x17, r24	; 23
	clr_bit(LED_PORT,LED_PIN);
 50c:	88 b3       	in	r24, 0x18	; 24
 50e:	8e 7f       	andi	r24, 0xFE	; 254
 510:	88 bb       	out	0x18, r24	; 24
 512:	08 95       	ret

00000514 <led_on>:
// to turn on LED.


void led_on(void)
{
	set_bit(LED_PORT,LED_PIN);
 514:	88 b3       	in	r24, 0x18	; 24
 516:	81 60       	ori	r24, 0x01	; 1
 518:	88 bb       	out	0x18, r24	; 24
 51a:	08 95       	ret

0000051c <led_off>:

// to turn off LED.

void led_off(void)
{
	clr_bit(LED_PORT,LED_PIN);
 51c:	88 b3       	in	r24, 0x18	; 24
 51e:	8e 7f       	andi	r24, 0xFE	; 254
 520:	88 bb       	out	0x18, r24	; 24
 522:	08 95       	ret

00000524 <SSD_ARRAY>:
// to Upload data to the Seven Segment.


void SSD_ARRAY(uint16_t N)
{
	SSD_DATA = Nums[N];
 524:	80 5a       	subi	r24, 0xA0	; 160
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	fc 01       	movw	r30, r24
 52a:	80 81       	ld	r24, Z
 52c:	82 bb       	out	0x12, r24	; 18
 52e:	08 95       	ret

00000530 <SSD_enable>:

// the 2 seven seg. are multiplexed and works with the same pins. This function is to enable one of them.

void SSD_enable(uint8_t disp)
{
	if(disp == 1){
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	39 f4       	brne	.+14     	; 0x542 <SSD_enable+0x12>
		set_bit(SSD_ENABLE_PORT,SSD1_ENABLE_PIN);
 534:	88 b3       	in	r24, 0x18	; 24
 536:	80 64       	ori	r24, 0x40	; 64
 538:	88 bb       	out	0x18, r24	; 24
		clr_bit(SSD_ENABLE_PORT,SSD2_ENABLE_PIN);
 53a:	88 b3       	in	r24, 0x18	; 24
 53c:	8f 77       	andi	r24, 0x7F	; 127
 53e:	88 bb       	out	0x18, r24	; 24
 540:	08 95       	ret
	}
	else if (disp == 2){
 542:	82 30       	cpi	r24, 0x02	; 2
 544:	31 f4       	brne	.+12     	; 0x552 <SSD_enable+0x22>
		set_bit(SSD_ENABLE_PORT,SSD2_ENABLE_PIN);
 546:	88 b3       	in	r24, 0x18	; 24
 548:	80 68       	ori	r24, 0x80	; 128
 54a:	88 bb       	out	0x18, r24	; 24
		clr_bit(SSD_ENABLE_PORT,SSD1_ENABLE_PIN);
 54c:	88 b3       	in	r24, 0x18	; 24
 54e:	8f 7b       	andi	r24, 0xBF	; 191
 550:	88 bb       	out	0x18, r24	; 24
 552:	08 95       	ret

00000554 <SSD_disable>:
//To disable the two seven segments 


void SSD_disable(void)
{
	clr_bit(SSD_ENABLE_PORT,SSD1_ENABLE_PIN);
 554:	88 b3       	in	r24, 0x18	; 24
 556:	8f 7b       	andi	r24, 0xBF	; 191
 558:	88 bb       	out	0x18, r24	; 24
	clr_bit(SSD_ENABLE_PORT,SSD2_ENABLE_PIN);
 55a:	88 b3       	in	r24, 0x18	; 24
 55c:	8f 77       	andi	r24, 0x7F	; 127
 55e:	88 bb       	out	0x18, r24	; 24
 560:	08 95       	ret

00000562 <SSD_init>:

void SSD_init(void)
{
	
	// setting Seven Segment Pins as output pins
	SSD_PORT_DIR = 0xFF;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	81 bb       	out	0x11, r24	; 17
	set_bit(SSD_ENABLE_PORT_DIR,SSD1_ENABLE_PIN);
 566:	87 b3       	in	r24, 0x17	; 23
 568:	80 64       	ori	r24, 0x40	; 64
 56a:	87 bb       	out	0x17, r24	; 23
	set_bit(SSD_ENABLE_PORT_DIR,SSD2_ENABLE_PIN);
 56c:	87 b3       	in	r24, 0x17	; 23
 56e:	80 68       	ori	r24, 0x80	; 128
 570:	87 bb       	out	0x17, r24	; 23
	
	// because we want the Seven Segment to be initially OFF until the on/off button is pressed
	SSD_disable();
 572:	0e 94 aa 02 	call	0x554	; 0x554 <SSD_disable>
 576:	08 95       	ret

00000578 <SSD_tun_off>:
// To turn off the Seven Segment 


void SSD_tun_off(void)
{
	SSD_DATA = 0x00;
 578:	12 ba       	out	0x12, r1	; 18
 57a:	08 95       	ret

0000057c <SSD_print>:

// To write on each of the two SSDs


void SSD_print(uint16_t N)
{
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	ac 01       	movw	r20, r24
	uint8_t units;
	uint8_t tens;
	
	units = N % 10;
 586:	9c 01       	movw	r18, r24
 588:	ad ec       	ldi	r26, 0xCD	; 205
 58a:	bc ec       	ldi	r27, 0xCC	; 204
 58c:	0e 94 b8 04 	call	0x970	; 0x970 <__umulhisi3>
 590:	ec 01       	movw	r28, r24
 592:	d6 95       	lsr	r29
 594:	c7 95       	ror	r28
 596:	d6 95       	lsr	r29
 598:	c7 95       	ror	r28
 59a:	d6 95       	lsr	r29
 59c:	c7 95       	ror	r28
 59e:	ce 01       	movw	r24, r28
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	cc 0f       	add	r28, r28
 5a6:	dd 1f       	adc	r29, r29
 5a8:	cc 0f       	add	r28, r28
 5aa:	dd 1f       	adc	r29, r29
 5ac:	cc 0f       	add	r28, r28
 5ae:	dd 1f       	adc	r29, r29
 5b0:	c8 0f       	add	r28, r24
 5b2:	d9 1f       	adc	r29, r25
 5b4:	ca 01       	movw	r24, r20
 5b6:	8c 1b       	sub	r24, r28
 5b8:	9d 0b       	sbc	r25, r29
 5ba:	ec 01       	movw	r28, r24
	tens = (int) N / 10;
 5bc:	ca 01       	movw	r24, r20
 5be:	6a e0       	ldi	r22, 0x0A	; 10
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	0e 94 a4 04 	call	0x948	; 0x948 <__divmodhi4>
 5c6:	8b 01       	movw	r16, r22
	
	SSD_enable(DISP1);
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 98 02 	call	0x530	; 0x530 <SSD_enable>
	SSD_ARRAY(units);
 5ce:	ce 01       	movw	r24, r28
 5d0:	99 27       	eor	r25, r25
 5d2:	0e 94 92 02 	call	0x524	; 0x524 <SSD_ARRAY>
 5d6:	8f ec       	ldi	r24, 0xCF	; 207
 5d8:	97 e0       	ldi	r25, 0x07	; 7
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <SSD_print+0x5e>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <SSD_print+0x64>
 5e0:	00 00       	nop
	_delay_ms(5);
	
	SSD_enable(DISP2);
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 98 02 	call	0x530	; 0x530 <SSD_enable>
	SSD_ARRAY(tens);
 5e8:	c8 01       	movw	r24, r16
 5ea:	99 27       	eor	r25, r25
 5ec:	0e 94 92 02 	call	0x524	; 0x524 <SSD_ARRAY>
 5f0:	8f ec       	ldi	r24, 0xCF	; 207
 5f2:	97 e0       	ldi	r25, 0x07	; 7
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <SSD_print+0x78>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <SSD_print+0x7e>
 5fa:	00 00       	nop
	_delay_ms(5);
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <ADC_init>:

void ADC_init()
{
	
	// selecting Vref
	set_bit(ADMUX,REFS0);
 606:	87 b1       	in	r24, 0x07	; 7
 608:	80 64       	ori	r24, 0x40	; 64
 60a:	87 b9       	out	0x07, r24	; 7
	
	// selecting channel 0
	clr_bit(ADMUX,MUX0);
 60c:	87 b1       	in	r24, 0x07	; 7
 60e:	8e 7f       	andi	r24, 0xFE	; 254
 610:	87 b9       	out	0x07, r24	; 7
	clr_bit(ADMUX,MUX1);
 612:	87 b1       	in	r24, 0x07	; 7
 614:	8d 7f       	andi	r24, 0xFD	; 253
 616:	87 b9       	out	0x07, r24	; 7
	clr_bit(ADMUX,MUX2);
 618:	87 b1       	in	r24, 0x07	; 7
 61a:	8b 7f       	andi	r24, 0xFB	; 251
 61c:	87 b9       	out	0x07, r24	; 7
	clr_bit(ADMUX,MUX3);
 61e:	87 b1       	in	r24, 0x07	; 7
 620:	87 7f       	andi	r24, 0xF7	; 247
 622:	87 b9       	out	0x07, r24	; 7
	clr_bit(ADMUX,MUX4);
 624:	87 b1       	in	r24, 0x07	; 7
 626:	8f 7e       	andi	r24, 0xEF	; 239
 628:	87 b9       	out	0x07, r24	; 7
	
	// leaving the data saving adjustment as default (right adjusted)
	clr_bit(ADMUX,ADLAR);
 62a:	87 b1       	in	r24, 0x07	; 7
 62c:	8f 7d       	andi	r24, 0xDF	; 223
 62e:	87 b9       	out	0x07, r24	; 7
	
	// selecting the prescaller division number for ADC
	
	set_bit(ADCSRA,ADPS0);
 630:	86 b1       	in	r24, 0x06	; 6
 632:	81 60       	ori	r24, 0x01	; 1
 634:	86 b9       	out	0x06, r24	; 6
	clr_bit(ADCSRA,ADPS1);
 636:	86 b1       	in	r24, 0x06	; 6
 638:	8d 7f       	andi	r24, 0xFD	; 253
 63a:	86 b9       	out	0x06, r24	; 6
	clr_bit(ADCSRA,ADPS2);
 63c:	86 b1       	in	r24, 0x06	; 6
 63e:	8b 7f       	andi	r24, 0xFB	; 251
 640:	86 b9       	out	0x06, r24	; 6
	
	
	set_bit(ADCSRA,ADEN); // ADC enabling
 642:	86 b1       	in	r24, 0x06	; 6
 644:	80 68       	ori	r24, 0x80	; 128
 646:	86 b9       	out	0x06, r24	; 6
 648:	08 95       	ret

0000064a <ADC_read>:
{
	
	uint16_t data;
	
	
	set_bit(ADCSRA,ADSC); // Start Conversion
 64a:	86 b1       	in	r24, 0x06	; 6
 64c:	80 64       	ori	r24, 0x40	; 64
 64e:	86 b9       	out	0x06, r24	; 6
	
	while(is_bit_clr(ADCSRA,ADIF));
 650:	30 9b       	sbis	0x06, 0	; 6
 652:	fe cf       	rjmp	.-4      	; 0x650 <ADC_read+0x6>
	
	
	
	data = ADCL;           // Read Data from the ADC Data Register
 654:	34 b1       	in	r19, 0x04	; 4
	data |= (ADCH<<8);     // Read the Low register first
 656:	85 b1       	in	r24, 0x05	; 5
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	98 2f       	mov	r25, r24
 65c:	88 27       	eor	r24, r24
	
	
	set_bit(ADCSRA,ADIF); // Clear Flag 
 65e:	26 b1       	in	r18, 0x06	; 6
 660:	20 61       	ori	r18, 0x10	; 16
 662:	26 b9       	out	0x06, r18	; 6
	
	return data;
 664:	83 2b       	or	r24, r19
 666:	08 95       	ret

00000668 <EEPROM_read>:


unsigned char EEPROM_read(const unsigned short addr)  // reading the data from the EEPROM given by the Address.
{
	
	EEARL = (char)addr;                 // setting the Address of the Register
 668:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char)(addr>>8);
 66a:	9f bb       	out	0x1f, r25	; 31
	
	
	set_bit(EECR,EERE);                 // Reading the data
 66c:	8c b3       	in	r24, 0x1c	; 28
 66e:	81 60       	ori	r24, 0x01	; 1
 670:	8c bb       	out	0x1c, r24	; 28
	
	
	return EEDR;                        // Return Data
 672:	8d b3       	in	r24, 0x1d	; 29
}
 674:	08 95       	ret

00000676 <EEPROM_write>:
void EEPROM_write(const unsigned short addr, unsigned char data)    // reading the data from the EEPROM given by the Address.
{
	unsigned char INT_EN=0;
	
	
	EEARL = (char)addr;         // Setting the Address of Register
 676:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char)(addr>>8);
 678:	9f bb       	out	0x1f, r25	; 31
	
	
	EEDR = data;                 // sending the data to the Data Register
 67a:	6d bb       	out	0x1d, r22	; 29
	
	
	if(((SREG&(1<<7))>>7)==1)      // Disabling the Interrupts for better performance
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	07 fe       	sbrs	r0, 7
 680:	05 c0       	rjmp	.+10     	; 0x68c <EEPROM_write+0x16>
	{
		INT_EN = 1;
		clr_bit(SREG,7);
 682:	8f b7       	in	r24, 0x3f	; 63
 684:	8f 77       	andi	r24, 0x7F	; 127
 686:	8f bf       	out	0x3f, r24	; 63
	EEDR = data;                 // sending the data to the Data Register
	
	
	if(((SREG&(1<<7))>>7)==1)      // Disabling the Interrupts for better performance
	{
		INT_EN = 1;
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	01 c0       	rjmp	.+2      	; 0x68e <EEPROM_write+0x18>



void EEPROM_write(const unsigned short addr, unsigned char data)    // reading the data from the EEPROM given by the Address.
{
	unsigned char INT_EN=0;
 68c:	90 e0       	ldi	r25, 0x00	; 0
		INT_EN = 1;
		clr_bit(SREG,7);
	}
	
	// Start Writing
	set_bit(EECR,EEMWE);
 68e:	8c b3       	in	r24, 0x1c	; 28
 690:	84 60       	ori	r24, 0x04	; 4
 692:	8c bb       	out	0x1c, r24	; 28
	set_bit(EECR,EEWE);
 694:	8c b3       	in	r24, 0x1c	; 28
 696:	82 60       	ori	r24, 0x02	; 2
 698:	8c bb       	out	0x1c, r24	; 28
	while(((EECR&(1<<EEWE))>>EEWE)==1);
 69a:	e1 99       	sbic	0x1c, 1	; 28
 69c:	fe cf       	rjmp	.-4      	; 0x69a <EEPROM_write+0x24>
	
	
	if (INT_EN==1)
 69e:	91 30       	cpi	r25, 0x01	; 1
 6a0:	19 f4       	brne	.+6      	; 0x6a8 <EEPROM_write+0x32>
	{
		set_bit(SREG,7);
 6a2:	8f b7       	in	r24, 0x3f	; 63
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	8f bf       	out	0x3f, r24	; 63
 6a8:	08 95       	ret

000006aa <timer1_init>:

void timer1_disable()
{
	
	
	clr_bit(TIMSK,OCIE1A);  // when Comparing with values A and B Disable the timer Interrupts 
 6aa:	8e b5       	in	r24, 0x2e	; 46
 6ac:	88 60       	ori	r24, 0x08	; 8
 6ae:	8e bd       	out	0x2e, r24	; 46
 6b0:	1b bc       	out	0x2b, r1	; 43
 6b2:	82 e6       	ldi	r24, 0x62	; 98
 6b4:	8a bd       	out	0x2a, r24	; 42
 6b6:	8e b5       	in	r24, 0x2e	; 46
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	8e bd       	out	0x2e, r24	; 46
 6bc:	8e b5       	in	r24, 0x2e	; 46
 6be:	8d 7f       	andi	r24, 0xFD	; 253
 6c0:	8e bd       	out	0x2e, r24	; 46
 6c2:	8e b5       	in	r24, 0x2e	; 46
 6c4:	84 60       	ori	r24, 0x04	; 4
 6c6:	8e bd       	out	0x2e, r24	; 46
 6c8:	78 94       	sei
 6ca:	08 95       	ret

000006cc <timer0_init>:
 6cc:	83 b7       	in	r24, 0x33	; 51
 6ce:	88 60       	ori	r24, 0x08	; 8
 6d0:	83 bf       	out	0x33, r24	; 51
 6d2:	8a ef       	ldi	r24, 0xFA	; 250
 6d4:	8c bf       	out	0x3c, r24	; 60
 6d6:	83 b7       	in	r24, 0x33	; 51
 6d8:	81 60       	ori	r24, 0x01	; 1
 6da:	83 bf       	out	0x33, r24	; 51
 6dc:	83 b7       	in	r24, 0x33	; 51
 6de:	84 60       	ori	r24, 0x04	; 4
 6e0:	83 bf       	out	0x33, r24	; 51
 6e2:	78 94       	sei
 6e4:	89 b7       	in	r24, 0x39	; 57
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	89 bf       	out	0x39, r24	; 57
 6ea:	08 95       	ret

000006ec <timer1_enable>:

void timer1_enable()               // to start timer(1) 
{
	
	
	set_bit(TIMSK,OCIE1A); // when Comparing with values A and B enable the timer Interrupts 
 6ec:	89 b7       	in	r24, 0x39	; 57
 6ee:	80 61       	ori	r24, 0x10	; 16
 6f0:	89 bf       	out	0x39, r24	; 57
 6f2:	08 95       	ret

000006f4 <__fixunssfsi>:
 6f4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_splitA>
 6f8:	88 f0       	brcs	.+34     	; 0x71c <__fixunssfsi+0x28>
 6fa:	9f 57       	subi	r25, 0x7F	; 127
 6fc:	98 f0       	brcs	.+38     	; 0x724 <__fixunssfsi+0x30>
 6fe:	b9 2f       	mov	r27, r25
 700:	99 27       	eor	r25, r25
 702:	b7 51       	subi	r27, 0x17	; 23
 704:	b0 f0       	brcs	.+44     	; 0x732 <__fixunssfsi+0x3e>
 706:	e1 f0       	breq	.+56     	; 0x740 <__fixunssfsi+0x4c>
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	1a f0       	brmi	.+6      	; 0x718 <__fixunssfsi+0x24>
 712:	ba 95       	dec	r27
 714:	c9 f7       	brne	.-14     	; 0x708 <__fixunssfsi+0x14>
 716:	14 c0       	rjmp	.+40     	; 0x740 <__fixunssfsi+0x4c>
 718:	b1 30       	cpi	r27, 0x01	; 1
 71a:	91 f0       	breq	.+36     	; 0x740 <__fixunssfsi+0x4c>
 71c:	0e 94 08 04 	call	0x810	; 0x810 <__fp_zero>
 720:	b1 e0       	ldi	r27, 0x01	; 1
 722:	08 95       	ret
 724:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_zero>
 728:	67 2f       	mov	r22, r23
 72a:	78 2f       	mov	r23, r24
 72c:	88 27       	eor	r24, r24
 72e:	b8 5f       	subi	r27, 0xF8	; 248
 730:	39 f0       	breq	.+14     	; 0x740 <__fixunssfsi+0x4c>
 732:	b9 3f       	cpi	r27, 0xF9	; 249
 734:	cc f3       	brlt	.-14     	; 0x728 <__fixunssfsi+0x34>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b3 95       	inc	r27
 73e:	d9 f7       	brne	.-10     	; 0x736 <__fixunssfsi+0x42>
 740:	3e f4       	brtc	.+14     	; 0x750 <__fixunssfsi+0x5c>
 742:	90 95       	com	r25
 744:	80 95       	com	r24
 746:	70 95       	com	r23
 748:	61 95       	neg	r22
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__floatunsisf>:
 752:	e8 94       	clt
 754:	09 c0       	rjmp	.+18     	; 0x768 <__floatsisf+0x12>

00000756 <__floatsisf>:
 756:	97 fb       	bst	r25, 7
 758:	3e f4       	brtc	.+14     	; 0x768 <__floatsisf+0x12>
 75a:	90 95       	com	r25
 75c:	80 95       	com	r24
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	99 23       	and	r25, r25
 76a:	a9 f0       	breq	.+42     	; 0x796 <__floatsisf+0x40>
 76c:	f9 2f       	mov	r31, r25
 76e:	96 e9       	ldi	r25, 0x96	; 150
 770:	bb 27       	eor	r27, r27
 772:	93 95       	inc	r25
 774:	f6 95       	lsr	r31
 776:	87 95       	ror	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b7 95       	ror	r27
 77e:	f1 11       	cpse	r31, r1
 780:	f8 cf       	rjmp	.-16     	; 0x772 <__floatsisf+0x1c>
 782:	fa f4       	brpl	.+62     	; 0x7c2 <__floatsisf+0x6c>
 784:	bb 0f       	add	r27, r27
 786:	11 f4       	brne	.+4      	; 0x78c <__floatsisf+0x36>
 788:	60 ff       	sbrs	r22, 0
 78a:	1b c0       	rjmp	.+54     	; 0x7c2 <__floatsisf+0x6c>
 78c:	6f 5f       	subi	r22, 0xFF	; 255
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <__floatsisf+0x6c>
 796:	88 23       	and	r24, r24
 798:	11 f0       	breq	.+4      	; 0x79e <__floatsisf+0x48>
 79a:	96 e9       	ldi	r25, 0x96	; 150
 79c:	11 c0       	rjmp	.+34     	; 0x7c0 <__floatsisf+0x6a>
 79e:	77 23       	and	r23, r23
 7a0:	21 f0       	breq	.+8      	; 0x7aa <__floatsisf+0x54>
 7a2:	9e e8       	ldi	r25, 0x8E	; 142
 7a4:	87 2f       	mov	r24, r23
 7a6:	76 2f       	mov	r23, r22
 7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <__floatsisf+0x5e>
 7aa:	66 23       	and	r22, r22
 7ac:	71 f0       	breq	.+28     	; 0x7ca <__floatsisf+0x74>
 7ae:	96 e8       	ldi	r25, 0x86	; 134
 7b0:	86 2f       	mov	r24, r22
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	2a f0       	brmi	.+10     	; 0x7c2 <__floatsisf+0x6c>
 7b8:	9a 95       	dec	r25
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	da f7       	brpl	.-10     	; 0x7b8 <__floatsisf+0x62>
 7c2:	88 0f       	add	r24, r24
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret

000007cc <__fp_split3>:
 7cc:	57 fd       	sbrc	r21, 7
 7ce:	90 58       	subi	r25, 0x80	; 128
 7d0:	44 0f       	add	r20, r20
 7d2:	55 1f       	adc	r21, r21
 7d4:	59 f0       	breq	.+22     	; 0x7ec <__fp_splitA+0x10>
 7d6:	5f 3f       	cpi	r21, 0xFF	; 255
 7d8:	71 f0       	breq	.+28     	; 0x7f6 <__fp_splitA+0x1a>
 7da:	47 95       	ror	r20

000007dc <__fp_splitA>:
 7dc:	88 0f       	add	r24, r24
 7de:	97 fb       	bst	r25, 7
 7e0:	99 1f       	adc	r25, r25
 7e2:	61 f0       	breq	.+24     	; 0x7fc <__fp_splitA+0x20>
 7e4:	9f 3f       	cpi	r25, 0xFF	; 255
 7e6:	79 f0       	breq	.+30     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7e8:	87 95       	ror	r24
 7ea:	08 95       	ret
 7ec:	12 16       	cp	r1, r18
 7ee:	13 06       	cpc	r1, r19
 7f0:	14 06       	cpc	r1, r20
 7f2:	55 1f       	adc	r21, r21
 7f4:	f2 cf       	rjmp	.-28     	; 0x7da <__fp_split3+0xe>
 7f6:	46 95       	lsr	r20
 7f8:	f1 df       	rcall	.-30     	; 0x7dc <__fp_splitA>
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7fc:	16 16       	cp	r1, r22
 7fe:	17 06       	cpc	r1, r23
 800:	18 06       	cpc	r1, r24
 802:	99 1f       	adc	r25, r25
 804:	f1 cf       	rjmp	.-30     	; 0x7e8 <__fp_splitA+0xc>
 806:	86 95       	lsr	r24
 808:	71 05       	cpc	r23, r1
 80a:	61 05       	cpc	r22, r1
 80c:	08 94       	sec
 80e:	08 95       	ret

00000810 <__fp_zero>:
 810:	e8 94       	clt

00000812 <__fp_szero>:
 812:	bb 27       	eor	r27, r27
 814:	66 27       	eor	r22, r22
 816:	77 27       	eor	r23, r23
 818:	cb 01       	movw	r24, r22
 81a:	97 f9       	bld	r25, 7
 81c:	08 95       	ret

0000081e <__mulsf3>:
 81e:	0e 94 22 04 	call	0x844	; 0x844 <__mulsf3x>
 822:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 826:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 82a:	38 f0       	brcs	.+14     	; 0x83a <__mulsf3+0x1c>
 82c:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 830:	20 f0       	brcs	.+8      	; 0x83a <__mulsf3+0x1c>
 832:	95 23       	and	r25, r21
 834:	11 f0       	breq	.+4      	; 0x83a <__mulsf3+0x1c>
 836:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 83a:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>
 83e:	11 24       	eor	r1, r1
 840:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_szero>

00000844 <__mulsf3x>:
 844:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_split3>
 848:	70 f3       	brcs	.-36     	; 0x826 <__mulsf3+0x8>

0000084a <__mulsf3_pse>:
 84a:	95 9f       	mul	r25, r21
 84c:	c1 f3       	breq	.-16     	; 0x83e <__mulsf3+0x20>
 84e:	95 0f       	add	r25, r21
 850:	50 e0       	ldi	r21, 0x00	; 0
 852:	55 1f       	adc	r21, r21
 854:	62 9f       	mul	r22, r18
 856:	f0 01       	movw	r30, r0
 858:	72 9f       	mul	r23, r18
 85a:	bb 27       	eor	r27, r27
 85c:	f0 0d       	add	r31, r0
 85e:	b1 1d       	adc	r27, r1
 860:	63 9f       	mul	r22, r19
 862:	aa 27       	eor	r26, r26
 864:	f0 0d       	add	r31, r0
 866:	b1 1d       	adc	r27, r1
 868:	aa 1f       	adc	r26, r26
 86a:	64 9f       	mul	r22, r20
 86c:	66 27       	eor	r22, r22
 86e:	b0 0d       	add	r27, r0
 870:	a1 1d       	adc	r26, r1
 872:	66 1f       	adc	r22, r22
 874:	82 9f       	mul	r24, r18
 876:	22 27       	eor	r18, r18
 878:	b0 0d       	add	r27, r0
 87a:	a1 1d       	adc	r26, r1
 87c:	62 1f       	adc	r22, r18
 87e:	73 9f       	mul	r23, r19
 880:	b0 0d       	add	r27, r0
 882:	a1 1d       	adc	r26, r1
 884:	62 1f       	adc	r22, r18
 886:	83 9f       	mul	r24, r19
 888:	a0 0d       	add	r26, r0
 88a:	61 1d       	adc	r22, r1
 88c:	22 1f       	adc	r18, r18
 88e:	74 9f       	mul	r23, r20
 890:	33 27       	eor	r19, r19
 892:	a0 0d       	add	r26, r0
 894:	61 1d       	adc	r22, r1
 896:	23 1f       	adc	r18, r19
 898:	84 9f       	mul	r24, r20
 89a:	60 0d       	add	r22, r0
 89c:	21 1d       	adc	r18, r1
 89e:	82 2f       	mov	r24, r18
 8a0:	76 2f       	mov	r23, r22
 8a2:	6a 2f       	mov	r22, r26
 8a4:	11 24       	eor	r1, r1
 8a6:	9f 57       	subi	r25, 0x7F	; 127
 8a8:	50 40       	sbci	r21, 0x00	; 0
 8aa:	9a f0       	brmi	.+38     	; 0x8d2 <__stack+0x73>
 8ac:	f1 f0       	breq	.+60     	; 0x8ea <__stack+0x8b>
 8ae:	88 23       	and	r24, r24
 8b0:	4a f0       	brmi	.+18     	; 0x8c4 <__stack+0x65>
 8b2:	ee 0f       	add	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	bb 1f       	adc	r27, r27
 8b8:	66 1f       	adc	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	91 50       	subi	r25, 0x01	; 1
 8c0:	50 40       	sbci	r21, 0x00	; 0
 8c2:	a9 f7       	brne	.-22     	; 0x8ae <__stack+0x4f>
 8c4:	9e 3f       	cpi	r25, 0xFE	; 254
 8c6:	51 05       	cpc	r21, r1
 8c8:	80 f0       	brcs	.+32     	; 0x8ea <__stack+0x8b>
 8ca:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 8ce:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_szero>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	e4 f3       	brlt	.-8      	; 0x8ce <__stack+0x6f>
 8d6:	98 3e       	cpi	r25, 0xE8	; 232
 8d8:	d4 f3       	brlt	.-12     	; 0x8ce <__stack+0x6f>
 8da:	86 95       	lsr	r24
 8dc:	77 95       	ror	r23
 8de:	67 95       	ror	r22
 8e0:	b7 95       	ror	r27
 8e2:	f7 95       	ror	r31
 8e4:	e7 95       	ror	r30
 8e6:	9f 5f       	subi	r25, 0xFF	; 255
 8e8:	c1 f7       	brne	.-16     	; 0x8da <__stack+0x7b>
 8ea:	fe 2b       	or	r31, r30
 8ec:	88 0f       	add	r24, r24
 8ee:	91 1d       	adc	r25, r1
 8f0:	96 95       	lsr	r25
 8f2:	87 95       	ror	r24
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret

000008f8 <__fp_inf>:
 8f8:	97 f9       	bld	r25, 7
 8fa:	9f 67       	ori	r25, 0x7F	; 127
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	08 95       	ret

00000904 <__fp_nan>:
 904:	9f ef       	ldi	r25, 0xFF	; 255
 906:	80 ec       	ldi	r24, 0xC0	; 192
 908:	08 95       	ret

0000090a <__fp_pscA>:
 90a:	00 24       	eor	r0, r0
 90c:	0a 94       	dec	r0
 90e:	16 16       	cp	r1, r22
 910:	17 06       	cpc	r1, r23
 912:	18 06       	cpc	r1, r24
 914:	09 06       	cpc	r0, r25
 916:	08 95       	ret

00000918 <__fp_pscB>:
 918:	00 24       	eor	r0, r0
 91a:	0a 94       	dec	r0
 91c:	12 16       	cp	r1, r18
 91e:	13 06       	cpc	r1, r19
 920:	14 06       	cpc	r1, r20
 922:	05 06       	cpc	r0, r21
 924:	08 95       	ret

00000926 <__fp_round>:
 926:	09 2e       	mov	r0, r25
 928:	03 94       	inc	r0
 92a:	00 0c       	add	r0, r0
 92c:	11 f4       	brne	.+4      	; 0x932 <__fp_round+0xc>
 92e:	88 23       	and	r24, r24
 930:	52 f0       	brmi	.+20     	; 0x946 <__fp_round+0x20>
 932:	bb 0f       	add	r27, r27
 934:	40 f4       	brcc	.+16     	; 0x946 <__fp_round+0x20>
 936:	bf 2b       	or	r27, r31
 938:	11 f4       	brne	.+4      	; 0x93e <__fp_round+0x18>
 93a:	60 ff       	sbrs	r22, 0
 93c:	04 c0       	rjmp	.+8      	; 0x946 <__fp_round+0x20>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	08 95       	ret

00000948 <__divmodhi4>:
 948:	97 fb       	bst	r25, 7
 94a:	07 2e       	mov	r0, r23
 94c:	16 f4       	brtc	.+4      	; 0x952 <__divmodhi4+0xa>
 94e:	00 94       	com	r0
 950:	07 d0       	rcall	.+14     	; 0x960 <__divmodhi4_neg1>
 952:	77 fd       	sbrc	r23, 7
 954:	09 d0       	rcall	.+18     	; 0x968 <__divmodhi4_neg2>
 956:	0e 94 c7 04 	call	0x98e	; 0x98e <__udivmodhi4>
 95a:	07 fc       	sbrc	r0, 7
 95c:	05 d0       	rcall	.+10     	; 0x968 <__divmodhi4_neg2>
 95e:	3e f4       	brtc	.+14     	; 0x96e <__divmodhi4_exit>

00000960 <__divmodhi4_neg1>:
 960:	90 95       	com	r25
 962:	81 95       	neg	r24
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__divmodhi4_neg2>:
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255

0000096e <__divmodhi4_exit>:
 96e:	08 95       	ret

00000970 <__umulhisi3>:
 970:	a2 9f       	mul	r26, r18
 972:	b0 01       	movw	r22, r0
 974:	b3 9f       	mul	r27, r19
 976:	c0 01       	movw	r24, r0
 978:	a3 9f       	mul	r26, r19
 97a:	70 0d       	add	r23, r0
 97c:	81 1d       	adc	r24, r1
 97e:	11 24       	eor	r1, r1
 980:	91 1d       	adc	r25, r1
 982:	b2 9f       	mul	r27, r18
 984:	70 0d       	add	r23, r0
 986:	81 1d       	adc	r24, r1
 988:	11 24       	eor	r1, r1
 98a:	91 1d       	adc	r25, r1
 98c:	08 95       	ret

0000098e <__udivmodhi4>:
 98e:	aa 1b       	sub	r26, r26
 990:	bb 1b       	sub	r27, r27
 992:	51 e1       	ldi	r21, 0x11	; 17
 994:	07 c0       	rjmp	.+14     	; 0x9a4 <__udivmodhi4_ep>

00000996 <__udivmodhi4_loop>:
 996:	aa 1f       	adc	r26, r26
 998:	bb 1f       	adc	r27, r27
 99a:	a6 17       	cp	r26, r22
 99c:	b7 07       	cpc	r27, r23
 99e:	10 f0       	brcs	.+4      	; 0x9a4 <__udivmodhi4_ep>
 9a0:	a6 1b       	sub	r26, r22
 9a2:	b7 0b       	sbc	r27, r23

000009a4 <__udivmodhi4_ep>:
 9a4:	88 1f       	adc	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	5a 95       	dec	r21
 9aa:	a9 f7       	brne	.-22     	; 0x996 <__udivmodhi4_loop>
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	bc 01       	movw	r22, r24
 9b2:	cd 01       	movw	r24, r26
 9b4:	08 95       	ret

000009b6 <_exit>:
 9b6:	f8 94       	cli

000009b8 <__stop_program>:
 9b8:	ff cf       	rjmp	.-2      	; 0x9b8 <__stop_program>
